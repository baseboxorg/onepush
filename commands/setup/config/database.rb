require 'yaml'

task :install_dbms => :install_essentials do
  if PARAMS.install_database?
    log_notice "Installing database server software..."
    type = APP_CONFIG.database_type

    on roles(:db) do |host|
      case host.properties.fetch(:os_class)
      when :redhat
        case type
        when 'postgresql'
          yum_install(host, %w(postgresql postgresql-server))
          files = sudo_capture(host, "ls -1 /var/lib/pgsql/data")
          if files.empty?
            sudo(host, "service postgresql initdb")
          end
          if !sudo_test(host, "service postgresql status")
            sudo(host, "service postgresql start")
            # Wait for PostgreSQL to start.
            sleep 1
          end
        else
          abort "Unsupported database type. Only PostgreSQL is supported."
        end
      when :debian
        case type
        when 'postgresql'
          apt_get_install(host, %w(postgresql postgresql-client))
        else
          abort "Unsupported database type. Only PostgreSQL is supported."
        end
      else
        raise "Bug"
      end
    end
  end
end

task :install_database_client_software => :install_essentials do
  if APP_CONFIG.database
    log_notice "Installing database client software..."
    type = APP_CONFIG.database_type

    on roles(:app) do |host|
      case host.properties.fetch(:os_class)
      when :redhat
        case type
        when 'postgresql'
          yum_install(host, %w(postgresql postgresql-devel))
        else
          abort "Unsupported database type. Only PostgreSQL is supported."
        end
      when :debian
        case type
        when 'postgresql'
          apt_get_install(host, %w(postgresql-client libpq-dev))
        else
          abort "Unsupported database type. Only PostgreSQL is supported."
        end
      else
        raise "Bug"
      end
    end
  end
end

task :setup_database => :install_database_client_software do
  if PARAMS.install_database?
    log_notice "Setting up database for app..."
    type = APP_CONFIG.database_type
    name = APP_CONFIG.database_name
    user = APP_CONFIG.database_user

    on roles(:db) do |host|
      case type
      when 'postgresql'
        user_test_script = "cd / && sudo -u postgres -H psql postgres -tAc " +
          "\"SELECT 1 FROM pg_roles WHERE rolname='#{user}'\" | grep -q 1"
        if !sudo_test(host, user_test_script)
          sudo(host, "cd / && sudo -u postgres -H createuser --no-password -SDR #{user}")
        end

        databases = sudo_capture(host, "cd / && sudo -u postgres -H psql postgres -lqt | cut -d \\| -f 1")
        if databases !~ /^ *#{Regexp.escape name} *\r?$/
          sudo(host, "cd / && sudo -u postgres -H createdb --no-password --owner #{user} #{name}")
        end
      else
        abort "Unsupported database type. Only PostgreSQL is supported."
      end
    end
  end
end

task :create_app_database_config => :create_app_dir do
  if APP_CONFIG.database
    log_notice "Installing database configuration files for app..."
    app_dir = APP_CONFIG.app_dir

    on roles(:app) do
      config = {}

      case APP_CONFIG.database_type
      when 'postgresql'
        config["adapter"] = "postgresql"
      else
        abort "Unsupported database type . Only PostgreSQL is supported."
      end

      if PARAMS.external_database
        config.merge!(PARAMS.external_database)
      else
        config["database"] = APP_CONFIG.database_name
        config["user"]     = APP_CONFIG.database_user
      end
      config["pool"] = 5
      config["encoding"] = "utf-8"

      # Generate database.yml.
      io = StringIO.new
      io.puts "# Automatically generated by #{POMODORI_APP_NAME}."
      io.puts "default_settings: &default_settings"
      io.puts YAML.dump("TOP" => config).sub(/.*?TOP:\n/m, "")
      io.puts
      ["development", "staging", "production"].each do |env|
        io.puts "#{env}:"
        io.puts "  <<: *default_settings"
        io.puts
      end
      io.rewind
      sudo_upload(host, io, "#{app_dir}/shared/config/database.yml",
        :chmod => 600,
        :chown => APP_CONFIG.user)

      # Generate database.json.
      io = StringIO.new
      io.puts JSON.pretty_generate(config)
      io.rewind
      sudo_upload(host, io, "#{app_dir}/shared/config/database.json",
        :chmod => 600,
        :chown => APP_CONFIG.user)
    end
  end
end
