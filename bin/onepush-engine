#!/usr/bin/env ruby
require 'optparse'

ROOT = File.absolute_path(File.dirname(__FILE__) + "/..")
PWD  = Dir.pwd
ENV['BUNDLE_GEMFILE'] = "#{ROOT}/Gemfile"
STDOUT.sync = STDERR.sync = true

require 'bundler/setup'
require 'json'

command = ARGV[0]
ARGV.shift

ENV.delete('MANIFEST_JSON')
ENV.delete('SSHKIT_OUTPUT')
ENV.delete('INSTALL_PUBKEYS')
ENV.delete('SSH_KEYS')
ENV.delete('VAGRANT_KEY')
ENV.delete('SERVERS')
ENV.delete('REPORT_PROGRESS')
ENV.delete('PROGRESS_BASE')

case command
when "setup", "deploy"
  servers = []
  ssh_keys = []

  parser = OptionParser.new do |opts|
    opts.banner = "Usage: onepush #{command} [options]"
    opts.separator ""

    opts.separator "Options:"
    opts.on("--manifest FILENAME", String) do |filename|
      ENV['MANIFEST_JSON'] = File.read(filename)
    end
    opts.on("--manifest-json JSON", String) do |json|
      ENV['MANIFEST_JSON'] = json
    end
    opts.on("--server ADDRESS", String) do |address|
      servers << address
    end
    opts.on("--ssh-log FILENAME", String) do |filename|
      ENV['SSHKIT_OUTPUT'] = filename
    end
    opts.on("--ssh-key FILENAME", String, "Private key to use for SSH connection") do |filename|
      ssh_keys << filename
    end
    opts.on("--vagrant-key", "Use Vagrant insecure private key for SSH connection") do
      ENV['VAGRANT_KEY'] = '1'
    end
    opts.on("--progress") do
      ENV['REPORT_PROGRESS'] = '1'
    end
    opts.on("--progress-base NUMBER", Float) do |val|
      ENV['PROGRESS_BASE'] = val.to_s
    end
  end
  begin
    parser.parse!
  rescue OptionParser::ParseError => e
    STDERR.puts e
    STDERR.puts
    STDERR.puts "Please see '--help' for valid options."
    exit 1
  end

  if servers.empty?
    abort "Please specify at least one --server."
  end

  ENV['SERVERS'] = JSON.generate(servers)
  ENV['SSH_KEYS'] = JSON.generate(ssh_keys)
  if command == "setup"
    ENV['PWD'] = PWD
    Dir.chdir("#{ROOT}/setup")
    exec("bundle", "exec", "cap", "production", "setup")
  else
    ENV['APP_ROOT'] = PWD
    Dir.chdir("#{ROOT}/deploy_ruby")
    exec("bundle", "exec", "cap", "production", "deploy")
  end

else
  puts "Usage: onepush <setup|deploy> [options...]"
  puts
  puts "Type onepush <COMMAND> --help for more information."
  exit 1
end
