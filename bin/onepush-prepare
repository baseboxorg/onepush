#!/usr/bin/env ruby
require 'optparse'

ROOT = File.absolute_path(File.dirname(__FILE__) + "/..")
PWD  = Dir.pwd
ENV['BUNDLE_GEMFILE'] = "#{ROOT}/Gemfile"
STDOUT.sync = STDERR.sync = true

require 'bundler/setup'
require 'fileutils'
require 'securerandom'
require 'json'
require 'yaml'

def parse_options
  options = {}

  parser = OptionParser.new do |opts|
    opts.banner = "Usage: onepush-engine [options]"
    opts.separator ""

    opts.separator "Options:"
    opts.on("--manifest FILENAME", String, "Manifest file to load") do |filename|
      options[:manifest] = JSON.parse(File.read(filename))
    end
    opts.on("--manifest-json JSON", String, "Manifest data to load") do |json|
      options[:manifest] = JSON.parse(json)
    end
    opts.on("--config", String, "Configuration file to use") do |filename|
      options[:config] = filename
    end
    opts.on("--work-dir", String, "Path to work directory") do |path|
      options[:work_dir] = path
    end
    opts.on("--port-begin", Integer, "First reservable tunnel port") do |port|
      options[:port_begin] = port
    end
    opts.on("--port-end", Integer, "Last reservable tunnel port") do |port|
      options[:port_end] = port
    end
    opts.on("--help") do
      puts parser
      exit
    end
  end
  begin
    parser.parse!
  rescue OptionParser::ParseError => e
    STDERR.puts e
    STDERR.puts
    STDERR.puts "Please see '--help' for valid options."
    exit 1
  end

  if !options[:manifest]
    abort "The --manifest or --manifest-json option is required"
  end

  options
end

def find_config_file(options)
  if options[:config]
    return options[:config]
  end
  ["#{ROOT}/config/config.yml", "~/.onepush-engine/config.yml", "/etc/onepush-engine/config.yml"].each do |path|
    path = File.expand_path(path)
    if File.exist?(path)
      return path
    end
  end
  nil
end

def load_config(options)
  if config_file = find_config_file(options)
    config = YAML.load(config_file)
  else
    config = {}
  end
  options[:work_dir]   ||= (config['work_dir'] || File.expand_path("~/.onepush-engine/work"))
  options[:port_begin] ||= (config['port_begin'] || 9_000)
  options[:port_end]   ||= (config['port_end'] || 16_000)
end

def create_work_dir(options)
  work_dir = options[:work_dir]
  if !File.exist?(work_dir)
    FileUtils.mkdir_p(work_dir)
    File.chmod(0700, work_dir)
  end
  FileUtils.mkdir_p("#{work_dir}/ports")
  FileUtils.mkdir_p("#{work_dir}/tokens")
end

def reserve_tunnel_port(options)
  done = false
  i = 0
  while !done
    port = options[:port_begin] + rand(options[:port_end] - options[:port_begin])
    path = "#{options[:work_dir]}/ports/#{port}"
    begin
      file = File.open(path, File::WRONLY | File::CREAT | File::EXCL, 0600)
      done = true
    rescue Errno::EEXIST
      i += 1
      port = nil
      done = i < 1000
    end
  end

  if port
    file.close
    options[:manifest]['tunnel_port'] = port
    path
  else
    abort "Cannot reserve a tunnel."
  end
end

def save_manifest(options, port_filename)
  json = JSON.generate(options[:manifest])

  begin
    name = SecureRandom.hex(16)
    path = "#{options[:work_dir]}/tokens/#{name}.json"
    file = File.open(path, File::WRONLY | File::CREAT | File::EXCL, 0600)
  rescue Errno::EEXIST
    retry
  end
  begin
    file.write(json)
  ensure
    file.close
  end

  name
end

def main
  options = parse_options
  load_config(options)
  create_work_dir(options)
  port_filename = reserve_tunnel_port(options)
  begin
    puts save_manifest(options, port_filename)
  rescue
    File.unlink(port_filename) rescue nil
    raise
  end
end

main
